#+TITLE: IO500 Plots
#+AUTHOR: Jean Bez
#+EXPORT_SELECT_TAGS: export
#+EXPORT_EXCLUDE_TAGS: noexport
#+STARTUP: overview indent
#+OPTIONS: ^:nil
#+OPTIONS: _:ni
#+PROPERTY: header-args :eval never-export

* IO500 Data

We need to get the updated CSV with the main IO500 results.

#+begin_src R :results output :session :exports both
library(plyr)

url = 'http://localhost/io-500-webpage-new/download/'

bofs = list(
  'SC17',
  'ISC18',
  'SC18',
  'SC18*',
  'ISC19',
  'SC19',
  'ISC20',
  'SC20'
)

datalist = list()

for (bof in bofs) {
  data <- read.csv(paste0(url, bof, '/io500'))
  data$bof <- bof

  datalist[[bof]] <- data
}

df <- do.call(rbind, datalist)

str(df)
#+end_src

#+RESULTS:
#+begin_example

'data.frame':	222 obs. of  67 variables:
 $ id                                         : int  1 2 3 4 5 6 7 8 1 2 ...
 $ release_id                                 : Factor w/ 6 levels "ISC18","SC18",..: 1 1 1 1 1 1 1 1 1 1 ...
 $ information_system                         : Factor w/ 77 levels "EMSL Cascade",..: 4 7 7 2 3 5 1 6 4 7 ...
 $ information_institution                    : Factor w/ 61 levels "DKRZ","Fraunhofer",..: 3 5 5 4 1 2 6 7 3 5 ...
 $ information_storage_vendor                 : Factor w/ 45 levels "","Cray","DDN",..: 3 2 2 6 5 6 1 4 3 2 ...
 $ information_filesystem_type                : Factor w/ 28 levels "BeeGFS","DataWarp",..: 3 2 4 1 4 1 4 5 3 2 ...
 $ information_client_nodes                   : int  2048 300 1000 8 100 24 126 16 2048 1024 ...
 $ information_client_total_procs             : int  16384 2400 16000 64 1000 24 252 160 16384 8192 ...
 $ io500_score                                : num  101.5 70.9 41 35.8 32.1 ...
 $ io500_bw                                   : num  471.2 151.5 54.2 14.2 22.8 ...
 $ io500_md                                   : num  21.9 33.2 31 89.8 45.4 ...
 $ io500_tot_iops                             : num  102.5 0 0 0 60.8 ...
 $ information_data                           : Factor w/ 2 levels "","zip": 2 1 1 1 1 1 1 1 2 2 ...
 $ information_10_node_challenge              : int  NA NA NA NA NA NA NA NA NA NA ...
 $ information_list_name                      : Factor w/ 6 levels "isc18","sc18",..: 1 1 1 1 1 1 1 1 1 1 ...
 $ information_identifier                     : Factor w/ 110 levels "2018-06-10","2018-06-12",..: 5 7 8 1 6 4 2 3 13 11 ...
 $ information_submitter                      : chr  NA NA NA NA ...
 $ information_submission_date                : Factor w/ 16 levels "11/1/19","11/1/17",..: 1 1 1 1 1 1 1 1 1 1 ...
 $ information_embargo_end_date               : chr  NA NA NA NA ...
 $ information_storage_install_date           : chr  NA NA NA NA ...
 $ information_storage_refresh_date           : chr  NA NA NA NA ...
 $ information_filesystem_name                : Factor w/ 62 levels "","lustre02",..: 1 1 1 1 2 1 1 1 1 1 ...
 $ information_filesystem_version             : chr  NA NA NA NA ...
 $ information_client_procs_per_node          : int  8 8 16 8 10 1 2 10 8 8 ...
 $ information_client_operating_system        : chr  NA NA NA NA ...
 $ information_client_operating_system_version: chr  NA NA NA NA ...
 $ information_client_kernel_version          : chr  NA NA NA NA ...
 $ information_md_nodes                       : int  0 0 0 0 0 0 0 0 0 0 ...
 $ information_md_storage_devices             : int  0 0 0 0 0 0 0 0 0 0 ...
 $ information_md_storage_type                : chr  NA NA NA NA ...
 $ information_md_volatile_memory_capacity    : chr  NA NA NA NA ...
 $ information_md_storage_interface           : chr  NA NA NA NA ...
 $ information_md_network                     : chr  NA NA NA NA ...
 $ information_md_software_version            : chr  NA NA NA NA ...
 $ information_md_operating_system_version    : chr  NA NA NA NA ...
 $ information_ds_nodes                       : int  0 0 0 0 0 0 0 0 0 0 ...
 $ information_ds_storage_devices             : int  0 0 0 0 0 0 0 0 0 0 ...
 $ information_ds_storage_type                : chr  NA NA NA NA ...
 $ information_ds_volatile_memory_capacity    : chr  NA NA NA NA ...
 $ information_ds_storage_interface           : chr  NA NA NA NA ...
 $ information_ds_network                     : chr  NA NA NA NA ...
 $ information_ds_software_version            : chr  NA NA NA NA ...
 $ information_ds_operating_system_version    : chr  NA NA NA NA ...
 $ information_note                           : Factor w/ 4 levels "","IME 1.0.1, stonewalled find",..: 2 1 1 1 3 1 1 1 4 1 ...
 $ information_best                           : logi  NA NA NA NA NA NA ...
 $ ior_easy_write                             : num  742.4 969.5 333 30.4 158.2 ...
 $ ior_easy_read                              : num  427.4 894.8 220.6 48.4 163.6 ...
 $ ior_hard_write                             : num  600.28 15.55 1.44 1.46 1.53 ...
 $ ior_hard_read                              : num  258.93 39.09 81.38 19.16 6.79 ...
 $ mdtest_easy_write                          : num  28.3 50.7 12.7 193.4 18.1 ...
 $ mdtest_easy_stat                           : num  54.2 49.4 120.8 718.2 153.1 ...
 $ mdtest_easy_delete                         : num  35.88 48.89 14.96 150.61 7.74 ...
 $ mdtest_hard_write                          : num  1.51 11.4 13.67 8.42 17.8 ...
 $ mdtest_hard_read                           : num  57.4 0 0 0 37.6 ...
 $ mdtest_hard_stat                           : num  61.5 38.7 127.3 100.8 156.1 ...
 $ mdtest_hard_delete                         : num  0.95 18.92 11.3 8.76 8.8 ...
 $ find_easy                                  : num  187 43 62 303 913 215 24 34 395 6 ...
 $ find_hard                                  : logi  NA NA NA NA NA NA ...
 $ marker_score                               : Factor w/ 1 level "Â§": 1 1 1 1 1 1 1 1 1 1 ...
 $ marker_md                                  : Factor w/ 1 level "Â§": 1 1 1 1 1 1 1 1 1 1 ...
 $ storage_data                               : Factor w/ 97 levels "","JCAHPC-17.zip",..: 2 1 1 1 1 1 1 1 4 6 ...
 $ status                                     : Factor w/ 2 levels "VALID","INVALID": 1 1 1 1 1 1 1 1 1 1 ...
 $ include_in_io500                           : int  1 1 1 1 1 1 1 1 1 1 ...
 $ valid_from                                 : Factor w/ 15 levels "11/1/19","1/1/18",..: 1 1 1 1 1 1 1 1 1 1 ...
 $ valid_to                                   : Factor w/ 3 levels "11/1/19","10/1/19",..: 1 1 1 1 1 1 1 1 1 1 ...
 $ score                                      : num  101.5 70.9 41 35.8 32.1 ...
 $ bof                                        : chr  "SC17" "SC17" "SC17" "SC17" ...
#+end_example

* IO500 Base Plots

#+begin_src R :results output :session :exports both
library(plyr)

# Make sure our factors follow the pre-defined order
df$list_name <- factor(df$bof, levels = bofs)

df$entry <- paste(df$information_system, df$information_filesystem, df$information_institution, sep = " | ")

df$text <- paste(
  'List: ', df$list_name, '<br>',
  'System: ', df$information_system, '<br>',
  'File System: ', df$information_filesystem_type, '<br>',
  'Institution: ', df$information_institution
)

str(df$entry)
str(df$text)

str(df)
#+end_src

#+RESULTS:
#+begin_example

 chr [1:222] "Oakforest-PACS |  | JCAHPC" "ShaheenII |  | KAUST" ...

 chr [1:222] "List:  SC17 <
System:  Oakforest-PACS <
File System:  IME <
Institution:  JCAHPC" ...

'data.frame':	222 obs. of  70 variables:
 $ id                                         : int  1 2 3 4 5 6 7 8 1 2 ...
 $ release_id                                 : Factor w/ 6 levels "ISC18","SC18",..: 1 1 1 1 1 1 1 1 1 1 ...
 $ information_system                         : Factor w/ 77 levels "EMSL Cascade",..: 4 7 7 2 3 5 1 6 4 7 ...
 $ information_institution                    : Factor w/ 61 levels "DKRZ","Fraunhofer",..: 3 5 5 4 1 2 6 7 3 5 ...
 $ information_storage_vendor                 : Factor w/ 45 levels "","Cray","DDN",..: 3 2 2 6 5 6 1 4 3 2 ...
 $ information_filesystem_type                : Factor w/ 28 levels "BeeGFS","DataWarp",..: 3 2 4 1 4 1 4 5 3 2 ...
 $ information_client_nodes                   : int  2048 300 1000 8 100 24 126 16 2048 1024 ...
 $ information_client_total_procs             : int  16384 2400 16000 64 1000 24 252 160 16384 8192 ...
 $ io500_score                                : num  101.5 70.9 41 35.8 32.1 ...
 $ io500_bw                                   : num  471.2 151.5 54.2 14.2 22.8 ...
 $ io500_md                                   : num  21.9 33.2 31 89.8 45.4 ...
 $ io500_tot_iops                             : num  102.5 0 0 0 60.8 ...
 $ information_data                           : Factor w/ 2 levels "","zip": 2 1 1 1 1 1 1 1 2 2 ...
 $ information_10_node_challenge              : int  NA NA NA NA NA NA NA NA NA NA ...
 $ information_list_name                      : Factor w/ 6 levels "isc18","sc18",..: 1 1 1 1 1 1 1 1 1 1 ...
 $ information_identifier                     : Factor w/ 110 levels "2018-06-10","2018-06-12",..: 5 7 8 1 6 4 2 3 13 11 ...
 $ information_submitter                      : chr  NA NA NA NA ...
 $ information_submission_date                : Factor w/ 16 levels "11/1/19","11/1/17",..: 1 1 1 1 1 1 1 1 1 1 ...
 $ information_embargo_end_date               : chr  NA NA NA NA ...
 $ information_storage_install_date           : chr  NA NA NA NA ...
 $ information_storage_refresh_date           : chr  NA NA NA NA ...
 $ information_filesystem_name                : Factor w/ 62 levels "","lustre02",..: 1 1 1 1 2 1 1 1 1 1 ...
 $ information_filesystem_version             : chr  NA NA NA NA ...
 $ information_client_procs_per_node          : int  8 8 16 8 10 1 2 10 8 8 ...
 $ information_client_operating_system        : chr  NA NA NA NA ...
 $ information_client_operating_system_version: chr  NA NA NA NA ...
 $ information_client_kernel_version          : chr  NA NA NA NA ...
 $ information_md_nodes                       : int  0 0 0 0 0 0 0 0 0 0 ...
 $ information_md_storage_devices             : int  0 0 0 0 0 0 0 0 0 0 ...
 $ information_md_storage_type                : chr  NA NA NA NA ...
 $ information_md_volatile_memory_capacity    : chr  NA NA NA NA ...
 $ information_md_storage_interface           : chr  NA NA NA NA ...
 $ information_md_network                     : chr  NA NA NA NA ...
 $ information_md_software_version            : chr  NA NA NA NA ...
 $ information_md_operating_system_version    : chr  NA NA NA NA ...
 $ information_ds_nodes                       : int  0 0 0 0 0 0 0 0 0 0 ...
 $ information_ds_storage_devices             : int  0 0 0 0 0 0 0 0 0 0 ...
 $ information_ds_storage_type                : chr  NA NA NA NA ...
 $ information_ds_volatile_memory_capacity    : chr  NA NA NA NA ...
 $ information_ds_storage_interface           : chr  NA NA NA NA ...
 $ information_ds_network                     : chr  NA NA NA NA ...
 $ information_ds_software_version            : chr  NA NA NA NA ...
 $ information_ds_operating_system_version    : chr  NA NA NA NA ...
 $ information_note                           : Factor w/ 4 levels "","IME 1.0.1, stonewalled find",..: 2 1 1 1 3 1 1 1 4 1 ...
 $ information_best                           : logi  NA NA NA NA NA NA ...
 $ ior_easy_write                             : num  742.4 969.5 333 30.4 158.2 ...
 $ ior_easy_read                              : num  427.4 894.8 220.6 48.4 163.6 ...
 $ ior_hard_write                             : num  600.28 15.55 1.44 1.46 1.53 ...
 $ ior_hard_read                              : num  258.93 39.09 81.38 19.16 6.79 ...
 $ mdtest_easy_write                          : num  28.3 50.7 12.7 193.4 18.1 ...
 $ mdtest_easy_stat                           : num  54.2 49.4 120.8 718.2 153.1 ...
 $ mdtest_easy_delete                         : num  35.88 48.89 14.96 150.61 7.74 ...
 $ mdtest_hard_write                          : num  1.51 11.4 13.67 8.42 17.8 ...
 $ mdtest_hard_read                           : num  57.4 0 0 0 37.6 ...
 $ mdtest_hard_stat                           : num  61.5 38.7 127.3 100.8 156.1 ...
 $ mdtest_hard_delete                         : num  0.95 18.92 11.3 8.76 8.8 ...
 $ find_easy                                  : num  187 43 62 303 913 215 24 34 395 6 ...
 $ find_hard                                  : logi  NA NA NA NA NA NA ...
 $ marker_score                               : Factor w/ 1 level "Â§": 1 1 1 1 1 1 1 1 1 1 ...
 $ marker_md                                  : Factor w/ 1 level "Â§": 1 1 1 1 1 1 1 1 1 1 ...
 $ storage_data                               : Factor w/ 97 levels "","JCAHPC-17.zip",..: 2 1 1 1 1 1 1 1 4 6 ...
 $ status                                     : Factor w/ 2 levels "VALID","INVALID": 1 1 1 1 1 1 1 1 1 1 ...
 $ include_in_io500                           : int  1 1 1 1 1 1 1 1 1 1 ...
 $ valid_from                                 : Factor w/ 15 levels "11/1/19","1/1/18",..: 1 1 1 1 1 1 1 1 1 1 ...
 $ valid_to                                   : Factor w/ 3 levels "11/1/19","10/1/19",..: 1 1 1 1 1 1 1 1 1 1 ...
 $ score                                      : num  101.5 70.9 41 35.8 32.1 ...
 $ bof                                        : chr  "SC17" "SC17" "SC17" "SC17" ...
 $ entry                                      : chr  "Oakforest-PACS |  | JCAHPC" "ShaheenII |  | KAUST" "ShaheenII |  | KAUST" "JURON |  | JSC" ...
 $ text                                       : chr  "List:  SC17 <
System:  Oakforest-PACS <
File System:  IME <
Institution:  JCAHPC" "List:  SC17 <
System:  ShaheenII <
File System:  DataWarp <
Institution:  KAUST" "List:  SC17 <
System:  ShaheenII <
File System:  Lustre <
Institution:  KAUST" "List:  SC17 <
System:  JURON <
File System:  BeeGFS <
Institution:  JSC" ...
 $ list_name                                  : Factor w/ 8 levels "SC17","ISC18",..: 1 1 1 1 1 1 1 1 2 2 ...
#+end_example

** IO500 Score

#+begin_src R :results output graphics :file "images/io500-score.png" :exports both :width 500 :height 300 :session
library(ggplot2)
library(dplyr)

plot <- ggplot(
  df,
  aes(
    x = list_name,
    y = io500_score,
    color = list_name,
    text = text
  )) + 
  geom_jitter(size = 1, width = 0.3) +
  scale_colour_manual(
    values = c(
      "#ec563c",
      "#1d2a30",
      "#ec563c",
      "#ec563c",
      "#1d2a30",
      "#ec563c",
      "#1d2a30",
      "#ec563c",
      "#1d2a30"
    )
  ) +
  xlab("") +
  ylab("IO500 Score") + 
  theme_bw() +
  theme(
    legend.position = "none",
    plot.title = element_text(size = 10),
    axis.title.y = element_text(vjust = 0.4), 
    strip.background = element_rect(colour = NA, fill = NA)
  )

plot
#+end_src

#+RESULTS:
[[file:images/io500-score.png]]

#+begin_src R :results output :session :exports both
library(plotly)
library(htmlwidgets)

options(warn = -1)

p <- ggplotly(plot, width = 1000, height = 400, tooltip = "text") %>%
  rangeslider(length(bofs) - 4.5, length(bofs) + 0.5) %>%
  layout(margin = list(pad = 0), yaxis = list(fixedrange = FALSE)) %>%
  layout(autosize = FALSE) %>%
  toWebGL()

p$sizingPolicy$padding <- "0"

saveWidget(p, selfcontained = FALSE, file.path(getwd(), "plotly/", "io500-score.html"))
#+end_src

#+RESULTS:
** IO500 Bandwidth

#+begin_src R :results output graphics :file "images/io500-bandwidth.png" :exports both :width 500 :height 300 :session
library(ggplot2)
library(dplyr)

plot <- ggplot(
  df,
  aes(
    x = list_name,
    y = io500_bw,
    color = list_name,
    text = text
  )) + 
  geom_jitter(size = 1, width = 0.3) +
  scale_colour_manual(
    values = c(
      "#ec563c",
      "#1d2a30",
      "#ec563c",
      "#ec563c",
      "#1d2a30",
      "#ec563c",
      "#1d2a30",
      "#ec563c",
      "#1d2a30"
    )
  ) +
  xlab("") +
  ylab("IO500 Bandwidth (GiB/s)") + 
  theme_bw() +
  theme(
    legend.position = "none",
    plot.title = element_text(size = 10),
    axis.title.y = element_text(vjust = 0.4), 
    strip.background = element_rect(colour = NA, fill = NA)
  )

plot
#+end_src

#+RESULTS:
[[file:images/io500-bandwidth.png]]

#+begin_src R :results output :session :exports both
library(plotly)
library(htmlwidgets)

p <- ggplotly(plot, width = 1000, height = 400, tooltip = "text") %>%
  rangeslider(length(bofs) - 4.5, length(bofs) + 0.5) %>%
  layout(margin = list(pad = 0), yaxis = list(fixedrange = FALSE)) %>%
  layout(autosize = FALSE) %>%
  toWebGL()

p$sizingPolicy$padding <- "0"

saveWidget(p, selfcontained = FALSE, file.path(getwd(), "plotly/", "io500-bandwidth.html"))
#+end_src

#+RESULTS:
** IO500 Metadata

#+begin_src R :results output graphics :file "images/io500-metadata.png" :exports both :width 500 :height 300 :session
library(ggplot2)
library(dplyr)

plot <- ggplot(
  df,
  aes(
    x = list_name,
    y = io500_md,
    color = list_name,
    text = text
  )) + 
  geom_jitter(size = 1, width = 0.3) +
  scale_colour_manual(
    values = c(
      "#ec563c",
      "#1d2a30",
      "#ec563c",
      "#ec563c",
      "#1d2a30",
      "#ec563c",
      "#1d2a30",
      "#ec563c",
      "#1d2a30"
    )
  ) +
  xlab("") +
  ylab("IO500 Metadata (KIOP/s)") + 
  theme_bw() +
  theme(
    legend.position = "none",
    plot.title = element_text(size = 10),
    axis.title.y = element_text(vjust = 0.4), 
    strip.background = element_rect(colour = NA, fill = NA)
  )

plot
#+end_src

#+RESULTS:
[[file:images/io500-metadata.png]]

#+begin_src R :results output :session :exports both
library(plotly)
library(htmlwidgets)

p <- ggplotly(plot, width = 1000, height = 400, tooltip = "text") %>%
  rangeslider(length(bofs) - 4.5, length(bofs) + 0.5) %>%
  layout(margin = list(pad = 0), yaxis = list(fixedrange = FALSE)) %>%
  layout(autosize = FALSE) %>%
  toWebGL()

p$sizingPolicy$padding <- "0"

saveWidget(p, selfcontained = FALSE, file.path(getwd(), "plotly/", "io500-metadata.html"))
#+end_src

#+RESULTS:
* IO500 IOR Plots

** IO500 Easy Write

#+begin_src R :results output graphics :file "images/io500-ior-easy-write.png" :exports both :width 500 :height 300 :session
library(ggplot2)
library(dplyr)

plot <- ggplot(
  df,
  aes(
    x = list_name,
    y = as.numeric(as.character(ior_easy_write)),
    color = list_name,
    text = text
  )) + 
  geom_jitter(size = 1, width = 0.3) +
  scale_colour_manual(
    values = c(
      "#ec563c",
      "#1d2a30",
      "#ec563c",
      "#ec563c",
      "#1d2a30",
      "#ec563c",
      "#1d2a30",
      "#ec563c",
      "#1d2a30"
    )
  ) +
  xlab("") +
  ylab("IOR Easy Write (GiB/s)") + 
  theme_bw() +
  theme(
    legend.position = "none",
    plot.title = element_text(size = 10),
    axis.title.y = element_text(vjust = 0.4), 
    strip.background = element_rect(colour = NA, fill = NA)
  )

plot
#+end_src

#+RESULTS:
[[file:images/io500-ior-easy-write.png]]

#+begin_src R :results output :session :exports both
library(plotly)
library(htmlwidgets)

p <- ggplotly(plot, width = 1000, height = 400, tooltip = "text") %>%
  rangeslider(length(bofs) - 4.5, length(bofs) + 0.5) %>%
  layout(margin = list(pad = 0), yaxis = list(fixedrange = FALSE)) %>%
  layout(autosize = FALSE) %>%
  toWebGL()

p$sizingPolicy$padding <- "0"

saveWidget(p, selfcontained = FALSE, file.path(getwd(), "plotly/", "io500-ior-easy-write.html"))
#+end_src

#+RESULTS:
** IO500 Easy Read

#+begin_src R :results output graphics :file "images/io500-ior-easy-read.png" :exports both :width 500 :height 300 :session
library(ggplot2)
library(dplyr)

plot <- ggplot(
  df,
  aes(
    x = list_name,
    y = as.numeric(as.character(ior_easy_read)),
    color = list_name,
    text = text
  )) + 
  geom_jitter(size = 1, width = 0.3) +
  scale_colour_manual(
    values = c(
      "#ec563c",
      "#1d2a30",
      "#ec563c",
      "#ec563c",
      "#1d2a30",
      "#ec563c",
      "#1d2a30",
      "#ec563c",
      "#1d2a30"
    )
  ) +
  xlab("") +
  ylab("IOR Easy Read (GiB/s)") + 
  theme_bw() +
  theme(
    legend.position = "none",
    plot.title = element_text(size = 10),
    axis.title.y = element_text(vjust = 0.4), 
    strip.background = element_rect(colour = NA, fill = NA)
  )

plot
#+end_src

#+RESULTS:
[[file:images/io500-ior-easy-read.png]]

#+begin_src R :results output :session :exports both
library(plotly)
library(htmlwidgets)

p <- ggplotly(plot, width = 1000, height = 400, tooltip = "text") %>%
  rangeslider(length(bofs) - 4.5, length(bofs) + 0.5) %>%
  layout(margin = list(pad = 0), yaxis = list(fixedrange = FALSE)) %>%
  layout(autosize = FALSE) %>%
  toWebGL()

p$sizingPolicy$padding <- "0"

saveWidget(p, selfcontained = FALSE, file.path(getwd(), "plotly/", "io500-ior-easy-read.html"))
#+end_src

#+RESULTS:
** IO500 Hard Write

#+begin_src R :results output graphics :file "images/io500-ior-hard-write.png" :exports both :width 500 :height 300 :session
library(ggplot2)
library(dplyr)

plot <- ggplot(
  df,
  aes(
    x = list_name,
    y = as.numeric(as.character(ior_hard_write)),
    color = list_name,
    text = text
  )) + 
  geom_jitter(size = 1, width = 0.3) +
  scale_colour_manual(
    values = c(
      "#ec563c",
      "#1d2a30",
      "#ec563c",
      "#ec563c",
      "#1d2a30",
      "#ec563c",
      "#1d2a30",
      "#ec563c",
      "#1d2a30"
    )
  ) +
  xlab("") +
  ylab("IOR Hard Write (GiB/s)") + 
  theme_bw() +
  theme(
    legend.position = "none",
    plot.title = element_text(size = 10),
    axis.title.y = element_text(vjust = 0.4), 
    strip.background = element_rect(colour = NA, fill = NA)
  )

plot
#+end_src

#+RESULTS:
[[file:images/io500-ior-hard-write.png]]

#+begin_src R :results output :session :exports both
library(plotly)
library(htmlwidgets)

p <- ggplotly(plot, width = 1000, height = 400, tooltip = "text") %>%
  rangeslider(length(bofs) - 4.5, length(bofs) + 0.5) %>%
  layout(margin = list(pad = 0), yaxis = list(fixedrange = FALSE)) %>%
  layout(autosize = FALSE) %>%
  toWebGL()

p$sizingPolicy$padding <- "0"

saveWidget(p, selfcontained = FALSE, file.path(getwd(), "plotly/", "io500-ior-hard-write.html"))
#+end_src

#+RESULTS:
** IO500 Hard Read

#+begin_src R :results output graphics :file "images/io500-ior-hard-read.png" :exports both :width 500 :height 300 :session
library(ggplot2)
library(dplyr)

plot <- ggplot(
  df,
  aes(
    x = list_name,
    y = as.numeric(as.character(ior_hard_read)),
    color = list_name,
    text = text
  )) + 
  geom_jitter(size = 1, width = 0.3) +
  scale_colour_manual(
    values = c(
      "#ec563c",
      "#1d2a30",
      "#ec563c",
      "#ec563c",
      "#1d2a30",
      "#ec563c",
      "#1d2a30",
      "#ec563c",
      "#1d2a30"
    )
  ) +
  xlab("") +
  ylab("IOR Hard Read (GiB/s)") + 
  theme_bw() +
  theme(
    legend.position = "none",
    plot.title = element_text(size = 10),
    axis.title.y = element_text(vjust = 0.4), 
    strip.background = element_rect(colour = NA, fill = NA)
  )

plot
#+end_src

#+RESULTS:
[[file:images/io500-ior-hard-read.png]]

#+begin_src R :results output :session :exports both
library(plotly)
library(htmlwidgets)

p <- ggplotly(plot, width = 1000, height = 400, tooltip = "text") %>%
  rangeslider(length(bofs) - 4.5, length(bofs) + 0.5) %>%
  layout(margin = list(pad = 0), yaxis = list(fixedrange = FALSE)) %>%
  layout(autosize = FALSE) %>%
  toWebGL()

p$sizingPolicy$padding <- "0"

saveWidget(p, selfcontained = FALSE, file.path(getwd(), "plotly/", "io500-ior-hard-read.html"))
#+end_src

#+RESULTS:
* IO500 MDtest Plots

** IO500 MDtest Easy Write

#+begin_src R :results output graphics :file "images/io500-mdtest-easy-write.png" :exports both :width 500 :height 300 :session
library(ggplot2)
library(dplyr)

plot <- ggplot(
  df,
  aes(
    x = list_name,
    y = as.numeric(as.character(mdtest_easy_write)),
    color = list_name,
    text = text
  )) + 
  geom_jitter(size = 1, width = 0.3) +
  scale_colour_manual(
    values = c(
      "#ec563c",
      "#1d2a30",
      "#ec563c",
      "#ec563c",
      "#1d2a30",
      "#ec563c",
      "#1d2a30",
      "#ec563c",
      "#1d2a30"
    )
  ) +
  xlab("") +
  ylab("MDtest Easy Write (kIOP/s)") + 
  theme_bw() +
  theme(
    legend.position = "none",
    plot.title = element_text(size = 10),
    axis.title.y = element_text(vjust = 0.4), 
    strip.background = element_rect(colour = NA, fill = NA)
  )

plot
#+end_src

#+RESULTS:
[[file:images/io500-mdtest-easy-write.png]]

#+begin_src R :results output :session :exports both
library(plotly)
library(htmlwidgets)

p <- ggplotly(plot, width = 1000, height = 400, tooltip = "text") %>%
  rangeslider(length(bofs) - 4.5, length(bofs) + 0.5) %>%
  layout(margin = list(pad = 0), yaxis = list(fixedrange = FALSE)) %>%
  layout(autosize = FALSE) %>%
  toWebGL()

p$sizingPolicy$padding <- "0"

saveWidget(p, selfcontained = FALSE, file.path(getwd(), "plotly/", "io500-mdtest-easy-write.html"))
#+end_src

#+RESULTS:
** IO500 MDtest Easy Stat

#+begin_src R :results output graphics :file "images/io500-mdtest-easy-stat.png" :exports both :width 500 :height 300 :session
library(ggplot2)
library(dplyr)

plot <- ggplot(
  df,
  aes(
    x = list_name,
    y = as.numeric(as.character(mdtest_easy_stat)),
    color = list_name,
    text = text
  )) + 
  geom_jitter(size = 1, width = 0.3) +
  scale_colour_manual(
    values = c(
      "#ec563c",
      "#1d2a30",
      "#ec563c",
      "#ec563c",
      "#1d2a30",
      "#ec563c",
      "#1d2a30",
      "#ec563c",
      "#1d2a30"
    )
  ) +
  xlab("") +
  ylab("MDtest Easy Stat (kIOP/s)") + 
  theme_bw() +
  theme(
    legend.position = "none",
    plot.title = element_text(size = 10),
    axis.title.y = element_text(vjust = 0.4), 
    strip.background = element_rect(colour = NA, fill = NA)
  )

plot
#+end_src

#+RESULTS:
[[file:images/io500-mdtest-easy-stat.png]]

#+begin_src R :results output :session :exports both
library(plotly)
library(htmlwidgets)

p <- ggplotly(plot, width = 1000, height = 400, tooltip = "text") %>%
  rangeslider(length(bofs) - 4.5, length(bofs) + 0.5) %>%
  layout(margin = list(pad = 0), yaxis = list(fixedrange = FALSE)) %>%
  layout(autosize = FALSE) %>%
  toWebGL()

p$sizingPolicy$padding <- "0"

saveWidget(p, selfcontained = FALSE, file.path(getwd(), "plotly/", "io500-mdtest-easy-stat.html"))
#+end_src

#+RESULTS:
** IO500 MDtest Easy Delete

#+begin_src R :results output graphics :file "images/io500-mdtest-easy-delete.png" :exports both :width 500 :height 300 :session
library(ggplot2)
library(dplyr)

plot <- ggplot(
  df,
  aes(
    x = list_name,
    y = as.numeric(as.character(mdtest_easy_delete)),
    color = list_name,
    text = text
  )) + 
  geom_jitter(size = 1, width = 0.3) +
  scale_colour_manual(
    values = c(
      "#ec563c",
      "#1d2a30",
      "#ec563c",
      "#ec563c",
      "#1d2a30",
      "#ec563c",
      "#1d2a30",
      "#ec563c",
      "#1d2a30"
    )
  ) +
  xlab("") +
  ylab("MDtest Easy Delete (kIOP/s)") + 
  theme_bw() +
  theme(
    legend.position = "none",
    plot.title = element_text(size = 10),
    axis.title.y = element_text(vjust = 0.4), 
    strip.background = element_rect(colour = NA, fill = NA)
  )

plot
#+end_src

#+RESULTS:
[[file:images/io500-mdtest-easy-delete.png]]

#+begin_src R :results output :session :exports both
library(plotly)
library(htmlwidgets)

p <- ggplotly(plot, width = 1000, height = 400, tooltip = "text") %>%
  rangeslider(length(bofs) - 4.5, length(bofs) + 0.5) %>%
  layout(margin = list(pad = 0), yaxis = list(fixedrange = FALSE)) %>%
  layout(autosize = FALSE) %>%
  toWebGL()

p$sizingPolicy$padding <- "0"

saveWidget(p, selfcontained = FALSE, file.path(getwd(), "plotly/", "io500-mdtest-easy-delete.html"))
#+end_src

#+RESULTS:
** IO500 MDtest Hard Write

#+begin_src R :results output graphics :file "images/io500-mdtest-hard-write.png" :exports both :width 500 :height 300 :session
library(ggplot2)
library(dplyr)

plot <- ggplot(
  df,
  aes(
    x = list_name,
    y = as.numeric(as.character(mdtest_hard_write)),
    color = list_name,
    text = text
  )) + 
  geom_jitter(size = 1, width = 0.3) +
  scale_colour_manual(
    values = c(
      "#ec563c",
      "#1d2a30",
      "#ec563c",
      "#ec563c",
      "#1d2a30",
      "#ec563c",
      "#1d2a30",
      "#ec563c",
      "#1d2a30"
    )
  ) +
  xlab("") +
  ylab("MDtest Hard Write (kIOP/s)") + 
  theme_bw() +
  theme(
    legend.position = "none",
    plot.title = element_text(size = 10),
    axis.title.y = element_text(vjust = 0.4), 
    strip.background = element_rect(colour = NA, fill = NA)
  )

plot
#+end_src

#+RESULTS:
[[file:images/io500-mdtest-hard-write.png]]

#+begin_src R :results output :session :exports both
library(plotly)
library(htmlwidgets)

p <- ggplotly(plot, width = 1000, height = 400, tooltip = "text") %>%
  rangeslider(length(bofs) - 4.5, length(bofs) + 0.5) %>%
  layout(margin = list(pad = 0), yaxis = list(fixedrange = FALSE)) %>%
  layout(autosize = FALSE) %>%
  toWebGL()

p$sizingPolicy$padding <- "0"

saveWidget(p, selfcontained = FALSE, file.path(getwd(), "plotly/", "io500-mdtest-hard-write.html"))
#+end_src

#+RESULTS:
** IO500 MDtest Hard Read

#+begin_src R :results output graphics :file "images/io500-mdtest-hard-read.png" :exports both :width 500 :height 300 :session
library(ggplot2)
library(dplyr)

plot <- ggplot(
  df,
  aes(
    x = list_name,
    y = as.numeric(as.character(mdtest_hard_read)),
    color = list_name,
    text = text
  )) + 
  geom_jitter(size = 1, width = 0.3) +
  scale_colour_manual(
    values = c(
      "#ec563c",
      "#1d2a30",
      "#ec563c",
      "#ec563c",
      "#1d2a30",
      "#ec563c",
      "#1d2a30",
      "#ec563c",
      "#1d2a30"
    )
  ) +
  xlab("") +
  ylab("MDtest Hard Read (kIOP/s)") + 
  theme_bw() +
  theme(
    legend.position = "none",
    plot.title = element_text(size = 10),
    axis.title.y = element_text(vjust = 0.4), 
    strip.background = element_rect(colour = NA, fill = NA)
  )

plot
#+end_src

#+RESULTS:
[[file:images/io500-mdtest-hard-read.png]]

#+begin_src R :results output :session :exports both
library(plotly)
library(htmlwidgets)

p <- ggplotly(plot, width = 1000, height = 400, tooltip = "text") %>%
  rangeslider(length(bofs) - 4.5, length(bofs) + 0.5) %>%
  layout(margin = list(pad = 0), yaxis = list(fixedrange = FALSE)) %>%
  layout(autosize = FALSE) %>%
  toWebGL()

p$sizingPolicy$padding <- "0"

saveWidget(p, selfcontained = FALSE, file.path(getwd(), "plotly/", "io500-mdtest-hard-read.html"))
#+end_src

#+RESULTS:
** IO500 MDtest Hard Stat

#+begin_src R :results output graphics :file "images/io500-mdtest-hard-stat.png" :exports both :width 500 :height 300 :session
library(ggplot2)
library(dplyr)

plot <- ggplot(
  df,
  aes(
    x = list_name,
    y = as.numeric(as.character(mdtest_hard_stat)),
    color = list_name,
    text = text
  )) + 
  geom_jitter(size = 1, width = 0.3) +
  scale_colour_manual(
    values = c(
      "#ec563c",
      "#1d2a30",
      "#ec563c",
      "#ec563c",
      "#1d2a30",
      "#ec563c",
      "#1d2a30",
      "#ec563c",
      "#1d2a30"
    )
  ) +
  xlab("") +
  ylab("MDtest Hard Stat (kIOP/s)") + 
  theme_bw() +
  theme(
    legend.position = "none",
    plot.title = element_text(size = 10),
    axis.title.y = element_text(vjust = 0.4), 
    strip.background = element_rect(colour = NA, fill = NA)
  )

plot
#+end_src

#+RESULTS:
[[file:images/io500-mdtest-hard-stat.png]]

#+begin_src R :results output :session :exports both
library(plotly)
library(htmlwidgets)

p <- ggplotly(plot, width = 1000, height = 400, tooltip = "text") %>%
  rangeslider(length(bofs) - 4.5, length(bofs) + 0.5) %>%
  layout(margin = list(pad = 0), yaxis = list(fixedrange = FALSE)) %>%
  layout(autosize = FALSE) %>%
  toWebGL()

p$sizingPolicy$padding <- "0"

saveWidget(p, selfcontained = FALSE, file.path(getwd(), "plotly/", "io500-mdtest-hard-stat.html"))
#+end_src

#+RESULTS:
** IO500 MDtest Hard Delete

#+begin_src R :results output graphics :file "images/io500-mdtest-hard-delete.png" :exports both :width 500 :height 300 :session
library(ggplot2)
library(dplyr)

plot <- ggplot(
  df,
  aes(
    x = list_name,
    y = as.numeric(as.character(mdtest_hard_delete)),
    color = list_name,
    text = text
  )) + 
  geom_jitter(size = 1, width = 0.3) +
  scale_colour_manual(
    values = c(
      "#ec563c",
      "#1d2a30",
      "#ec563c",
      "#ec563c",
      "#1d2a30",
      "#ec563c",
      "#1d2a30",
      "#ec563c",
      "#1d2a30"
    )
  ) +
  xlab("") +
  ylab("MDtest Hard Delete (kIOP/s)") + 
  theme_bw() +
  theme(
    legend.position = "none",
    plot.title = element_text(size = 10),
    axis.title.y = element_text(vjust = 0.4), 
    strip.background = element_rect(colour = NA, fill = NA)
  )

plot
#+end_src

#+RESULTS:
[[file:images/io500-mdtest-hard-delete.png]]

#+begin_src R :results output :session :exports both
library(plotly)
library(htmlwidgets)

p <- ggplotly(plot, width = 1000, height = 400, tooltip = "text") %>%
  rangeslider(length(bofs) - 4.5, length(bofs) + 0.5) %>%
  layout(margin = list(pad = 0), yaxis = list(fixedrange = FALSE)) %>%
  layout(autosize = FALSE) %>%
  toWebGL()

p$sizingPolicy$padding <- "0"

saveWidget(p, selfcontained = FALSE, file.path(getwd(), "plotly/", "io500-mdtest-hard-delete.html"))
#+end_src

#+RESULTS:
* IO500 Find Plot

** IO500 Find Easy

#+begin_src R :results output graphics :file "images/io500-find.png" :exports both :width 500 :height 300 :session
library(ggplot2)
library(dplyr)

plot <- ggplot(
  df,
  aes(
    x = list_name,
    y = as.numeric(as.character(find_hard)),
    color = list_name,
    text = text
  )) + 
  geom_jitter(size = 1, width = 0.3) +
  scale_colour_manual(
    values = c(
      "#ec563c",
      "#1d2a30",
      "#ec563c",
      "#ec563c",
      "#1d2a30",
      "#ec563c",
      "#1d2a30",
      "#ec563c",
      "#1d2a30"
    )
  ) +
  xlab("") +
  ylab("Find (kIOP/s)") + 
  theme_bw() +
  theme(
    legend.position = "none",
    plot.title = element_text(size = 10),
    axis.title.y = element_text(vjust = 0.4), 
    strip.background = element_rect(colour = NA, fill = NA)
  )

plot
#+end_src

#+RESULTS:
[[file:images/io500-find.png]]

#+begin_src R :results output :session :exports both
library(plotly)
library(htmlwidgets)

p <- ggplotly(plot, width = 1000, height = 400, tooltip = "text") %>%
  rangeslider(length(bofs) - 4.5, length(bofs) + 0.5) %>%
  layout(margin = list(pad = 0), yaxis = list(fixedrange = FALSE)) %>%
  layout(autosize = FALSE) %>%
  toWebGL()

p$sizingPolicy$padding <- "0"

saveWidget(p, selfcontained = FALSE, file.path(getwd(), "plotly/", "io500-find.html"))
#+end_src

#+RESULTS:
